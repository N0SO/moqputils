#!/usr/bin/env python
"""
Update History:
* Sat Apr 23 2022 Mike Heitmann, N0SO <n0so@arrl.net>
- V0.0.1 -First interation for 2021 MOQP.
* Sat Dec 06 2023 Mike Heitmann, N0SO <n0so@arrl.net>
- V0.1.0 -Updated to take file names from the actual directory where.
-         the certificate files are located.
"""

DESCRIPTION = \
"""makehtml.py  - Generates an html table of certificate winners based
          on two parameters provided as inputs:
            -c --call_list - A list of callsigns, operators and the 
                             file name desired to appear in the link.
                             This file should be generated by taking the
                             output from mqplabels and copy/pasting the
                             call, operator and filename columns from
                             the report to a new .csv file. The 
                             mqplabels file should also be used to
                             generate the certificate files  via a "mail
                             merge" process the ensure the certificate
                             file names align with the file list.
            -f --file_path - the full path to the actual certificate 
                             files.
          The resulting html table is intended to be copy/pasted
          into a SHOWME or MISSOURI report for the web page.
"""

EPILOG = \
"""
Running with no parameters will launch the GUI (eventually).
"""

TABLESTART = \
"""
<table>
<tr><th>STATION</th><th>OPERATORS</th><AWARD DOWNLOAD LINK</th></tr>
"""

TABLEROW = \
"""
<tr><td>{}</td><td>{}</td><td><a href="./{}">{} DOWNLOAD</a></td></tr> 
"""


import os, sys, argparse
VERSION = '0.1.0'
ARGS = None

class get_args():
    def __init__(self):
        if __name__ == '__main__':
            self.args = self.getargs()
            
    def getargs(self):
        parser = argparse.ArgumentParser(\
                               description = DESCRIPTION,
                                           epilog = EPILOG)

        parser.add_argument('-v', '--version', 
                                  action='version', 
                                  version = VERSION)

        parser.add_argument('-c', '--call_list',
            default=None,
            help="""The file containing the list of STATIONS, OPERATORS
                    and file LINK NAMES. This is expected to be the 
                    output of the mqplabels -s or -m command. The 
                    callsign/ operator list must be ordered to match the
                    list of certificate files in the path list passed as
                    -f or --file_list. This is best accomplished by
                    using the output from mqplabels to perform a mail 
                    merge to generate the certificate files and then 
                    split the resulting pdf file into individual 
                    certificate files with the Linux pdftk command.""")

        parser.add_argument('-f', '--file_path',
            default=None,
            help="""The path to the directory containing the list of 
                    certificate files. These should be the files created
                    by the mail merge using the mqplables report output.
                    The single pdf file created by the merge may be 
                    split into individual certificate files using the
                    Linux command pdftk merged_certs.pdf burst to create
                    the inividual certificate file. The new file should
                    be named pg_xxxx.pdf, ordered alphabetically like 
                    the list calls in the mqplables report.""")

        args = parser.parse_args()
        print(args)
        return args

args=get_args()


if (args.args.file_path==None) or (args.args.call_list==None):
    exit()
"""
Fetch list of filenames that start with 'pg_' from the path passed by 
the file_path argument.
"""
f=[]
for (dirpath, dirnames, filenames) in os.walk(args.args.file_path):
    f.extend(filenames)
    break 
    
f.sort()
fnames = []
for fn in f:
    if fn.startswith('pg_') and fn.endswith('.pdf'):
        fnames.append(fn)
        
#print(f'sorted - {fnames}')

with open(args.args.call_list) as f:
        calls=f.readlines()
#print(calls)
#print(f'len(calls)={len(calls)}')
    
i=0
print(TABLESTART)
   
for call in calls:
    #print(f'{line}\n{calls[i]}')
    if call != '':
        callparts = call.split(',')
        #print(fnames[i], callparts)
        if len(callparts)>=3:
            stacall = callparts[0].strip()
            opscall = callparts[1].strip()
            if stacall == opscall:
                opscall = '' # Only show op calls if they are different
            print(TABLEROW.format(\
                stacall, # Call
                opscall, # Ops
                fnames[i].strip(), #actual file name
                callparts[2].strip() #Link text file name 
                ))
        i += 1
print('</table>')   
    
