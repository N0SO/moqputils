#!/usr/bin/env python
import os, sys, argparse
"""
csv2cab - 
Process a .csv file from MSExcel (or other spreadsheets)
and make it a .CAB file by removing all commas, blank
QSO: lines, etc. Usually used to clean a file submitted
using AA0CL's MOQP_log.xls form.

Usage:
 python csv2cab.py -i logfilename.csv

This will create a file named logfile.csv.log that should
be in the same folder as the source.

Starting with V1.0.2, can also be called from inside your 
code:
from csv2cab import *
mycab = csv2cab('csvcabfilename')

--or-- if you want to manipulate the cab data:
mycab = csv2cab()
mycsvdata = mycab.readcsvcabFile(csvcabfilename)
mycabdata = mycab.processcsvData(mycsvdata)

* Thu Oct 10 2019 Mike Heitmann, N0SO <n0so@arrl.net>
- V0.1.0 - 2019-10-10
- Made csv2cab inherit from CabrilloUtils.
- Make module cabrilloutils with classes cabrilloutils, 
- csv2CAB and ui_csv2cab.
- Added csv2cab script that will do both command line and GUI.
* Mon Oct 14 2019 Mike Heitmann, N0SO <n0so@arrl.net>
- V1.0.0 - Ready for release
- Also renamed module directory to cabrilloutils
* Sun Apr 02 2022 Mike Heitmann, N0SO <n0so@arrl.net>
- V2.0.0 - Updated to use new developmet module pathing methods.
-          Also added code to remove all the  QSO column header
-          lines and the extra QSO: ,,,,, lines present in our
-          MOQP_log.xls(x) spreadsheet. Most changes were in the
-          cabrilloutils.cab2csv.py file.
"""


DESCRIPTION = \
"""csv2cab - Process a .csv file from MSExcel (or other spreadsheets)
and make it a .CAB file by removing all commas, blank
QSO: lines, etc. Usually used to clean a file submitted
using AA0CL's MOQP_log.xls form."""

EPILOG = \
"""
Running with no parameters will launch the GUI.
"""

whereami = os.path.split( os.path.realpath(__file__) )
if os.path.exists(whereami[0] + '/mqpdevpath.py'):
    from mqpdevpath import *

from cabrilloutils.common import common

"""
The main app class.
Only gets called if this file is running stand alone, and
not if it's included as part of a larger application
"""
class theApp():        
    def __init__(self):
        self.appMain()

    def getArgs(self):
        commons = common()
        parser = argparse.ArgumentParser(\
                               description = DESCRIPTION,
                                           epilog = EPILOG)
        parser.add_argument('-v', '--version', action='version', 
                             version = commons.__get_app_version__())
        parser.add_argument("-i", "--inputfile", default=None,
            help="Specifies the log file input file name")
        return parser.parse_args()
        return args

    def appMain(self):
        args = self.getArgs()
        if (args.inputfile):
            from cabrilloutils.csv2cab import csv2CAB
            app = csv2CAB(args.inputfile)
        else:
            from ui_csv2cab import gui_csv2cab
            app=gui_csv2cab()
"""
Main program - run stand-alone if not included as part of a larger application
"""
if __name__ == '__main__':
   app = theApp()
