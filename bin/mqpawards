#!/usr/bin/env python3
DESCRIPTION = \
"""mqpawards  -  Generate the following award lists:
                 First Place Plaques
                 First Place Certificates that don't get a plaque
                 First Place US STATE certiciates/ CANADIAN PROVANCE 1st and 2nd 
                 place winner reports for the MOQP from the
                 MOQP database SUMMARY Table.
                
                 Added for the 2020 MOQP.
"""

"""
Update History:
* Fri May 29 2020 Mike Heitmann, N0SO <n0so@arrl.net>
- V0.0.1 -First interation for 2020 MOQP
* Sat Dec 10 2021 Mike Heitmann, N0SO <n0so@arrl.net>
- V0.1.0 -Update to support new DEVMODPATH
* Sat Apr 02 2022 Mike Heitmann, N0SO <n0so@arrl.net>
- V1.0.0 -Added HTML reports to SHOWME, MISSOURI and
-         STATE PROVINCE reports and the calls to 
-         decide whiich one to use.
* Wed May 15 2024 Mike Heitmann, N0SO <n0so@arrl.net>
- V1.0.1 -Added table PLAQUESLIST to database and reworked code in
-         CATEGORYPlaques.py to use it as a source for award names when
-        -the -a option is selected. Writes output to DB table if -a
-        -create-table is entered. -a 1 or -a 2 builds award lists from
-        -the new table (FIRSTPLACE). 
"""

import os.path
import sys
import argparse
VERSION = '1.0.1'
ARGS = None

whereami = os.path.split( os.path.realpath(__file__) )
if os.path.exists(whereami[0] + '/mqpdevpath.py'):
    from mqpdevpath import *
        

EPILOG = \
"""
Running with no parameters will launch the GUI.
"""

class get_args():
    def __init__(self):
        if __name__ == '__main__':
            self.args = self.getargs()
            
    def getargs(self):
        parser = argparse.ArgumentParser(\
                               description = DESCRIPTION,
                                           epilog = EPILOG)
        parser.add_argument('-v', '--version', 
                                  action='version', 
                                  version = VERSION)
        parser.add_argument('-a', '--award',
                                   choices=['1', '2', 'create-table'],
                                   default=None,
            help="Create a list of the 1st place award (plaque) "+\
                  "winners in each MOQPCATEGORY. ")
        parser.add_argument('-c', '--category',
                                   default=None,
                                   choices = ['1', '2'],
            help="""Create a list of the 1st or 2nd place winners in 
                    each MOQPCATEGORY.
                    mqoawards -c 1 = FIRST PLACE List,
                    mqoawards -c 2 = SECOND PLACE List.""")
        parser.add_argument('-s', '--showme', 
                                   action='store_true',
                                   default=None,
            help="Create a list of the SHOWME certificate winners.")
        parser.add_argument('-m', '--missouri', 
                                   action='store_true',
                                   default=None,
            help="Create a list of the MISSOURI certificate winners.")
        parser.add_argument('-p', '--provstate', 
                                   default=None,
                                   choices = ['1', '2', 
                                              'create-table',
                                              'update-list'],
            help="""Display a list of the 1st or 2nd place
                  STATE/PROV certificate winners.
                  mqoawards -p 1 = FIRST PLACE List,
                  mqoawards -p 2 = SECOND PLACE List,
                  mqpawards -p create-table = create the table that 
                  holds the state/province results.
                  mqpawards -p update-list = Update the state / provice
                  name table from the moqpawardefs.py file. Only needs
                  to be done if the defs file is updated.""")
        parser.add_argument('-t', '--reportType',
                                   choices = ['csv', 'html'],
                                   default = 'csv',
            help="""Set report type for output. Only valid if more than
                    one report output type is avaible. Options are: 
                    csv (Comma Separated Variables) for printing or
                    for import to a spreadsheet, or 
                    html for web page use.
                    default value is csv""")
        args = parser.parse_args()
        #print(args)
        return args

if __name__ == '__main__':
   args = get_args()

   #print (args.args)
   
   if (args.args.reportType):
       reportType = args.args.reportType.lower()
   else:
       reportType='csv'
   if (args.args.award):
       #print('Running plaques')
       if ('csv' in reportType):
           from moqputils.moqpAwards.CATEGORYPlaques import CATEGORYPlaques
           app = CATEGORYPlaques(args.args.award)
       elif ('html' in reportType):
           from moqputils.moqpAwards.CATEGORYPlaques import HTMLPlaques
           app = HTMLPlaques(args.args.award)
   elif (args.args.category):
       #print('Running CATEGORY Awards %s %s'%(args.args.category, args.args.reportType))
       if ('csv' in reportType):
           from moqputils.moqpAwards.CATEGORYAwards import CATEGORYAwards
           app = CATEGORYAwards(args.args.category)
       elif ('html' in reportType):
           from moqputils.moqpAwards.CATEGORYAwards import HTMLAwards
           app = HTMLAwards(args.args.category)
   elif (args.args.showme):
       if ('csv' in reportType):
           from moqputils.moqpAwards.SHOWMEAwards import SHOWMEAwards
           app = SHOWMEAwards('SHOWME')
       elif ('html' in reportType):
           from moqputils.moqpAwards.SHOWMEAwards import HTMLShowMeAwards
           app = HTMLShowMeAwards('SHOWME')
   elif (args.args.missouri):
       if ('csv' in reportType):
           from moqputils.moqpAwards.SHOWMEAwards import MOAwards
           app = MOAwards('MISSOURI')
       elif ('html' in reportType):
           from moqputils.moqpAwards.SHOWMEAwards import HTMLMoAwards
           app = HTMLMoAwards('MISSOURI')
   elif (args.args.provstate): 
       #print("Running STATEAwards ", args.args.provstate,args.args.reportType)
       rtype = args.args.reportType.lower()
       if ('html' in rtype):
           #Run the HTML report when it's ready
           from moqputils.moqpAwards.stateAwards import HTMLSTATEAwards
           app = HTMLSTATEAwards(args.args.provstate)
       else:
           #Run the csv report
           from moqputils.moqpAwards.stateAwards import STATEAwards
           app = STATEAwards(args.args.provstate)
   else:
       print("Attempting to run GUI...")
       from gui_reports import labels_ui
       app=gui_reports()
        
