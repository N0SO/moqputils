#!/usr/bin/env python3
"""
mqpcategory  - Determine which Missouri QSO Party Award
               category a Cabrillo Format log file is in.
                
               Based on 2019 MOQP Rules

Update History:
* Fri May 10 2019 Mike Heitmann, N0SO <n0so@arrl.net>
- V0.0.1 - 2019-05-10 -First interation
* Tue Oct 15 2019 Mike Heitmann, N0SO <n0so@arrl.net>
- V0.1.0 
- Added this file (mqpcategory) and moved the MOQPCategory
- and GUI into the moqputils module directory.
* Thu Feb 13 2020 Mike Heitmann, N0SO <n0so@arrl.net>
- V0.1.1 
- Added mqpdbxxx to the menus
* Fri Sep 11 2020 Mike Heitmann, N0SO <n0so@arrl.net>
- V0.1.2 
- Updated -C --county options to -m --mostcounties for
- consistancy with mqpreports. 
* Mon Feb 22 2021 Mike Heitmann, N0SO <n0so@arrl.net>
- V0.1.3 
- Updated to start the DEVMODPATH from the 
- current working directory.
* Mon Aug 31 Mike Heitmann, N0SO <n0so@arrl.net>
- V0.1.4 - Added import of mqpdevpath.py to auto determine
-          development module path if it exists.
"""

import os.path
import sys
import argparse
VERSION = '0.1.3'
ARGS = None

# If the development module source paths exist, 
# add them to the python path
whereami = os.path.split( os.path.realpath(__file__) )
if os.path.exists(whereami[0] + '/mqpdevpath.py'):
    from mqpdevpath import *


DESCRIPTION = \
"""moqpcategory  - Determine which Missouri QSO Party Award
                   category a Cabrillo Format log file is in.
                
                   Based on 2019 MOQP Rules
"""

EPILOG = \
"""
Running with no parameters will launch the GUI.
"""

class get_args():
    def __init__(self):
        if __name__ == '__main__':
            self.args = self.getargs()
            
    def getargs(self):
        parser = argparse.ArgumentParser(\
                               description = DESCRIPTION,
                                           epilog = EPILOG)
        parser.add_argument('-v', '--version', action='version', version = VERSION)
        parser.add_argument('-c', '--callsign', default=None,
            help='CALLSIGN in MOQP database to summarize. Entering allcalls = all calls in database')
        parser.add_argument('-d', '--digital', default=None,
            help='Summarize digital QSOs only for CALLSIGN in MOQP database. Entering allcalls = all calls in database')
        parser.add_argument('-U', '--vhf', default=None,
            help='Summarize VHF QSOs only for CALLSIGN in MOQP database. Entering allcalls = all calls in database')
        parser.add_argument('-m', '--mostcounties', default=None,
            help='Summarize MISSOURI COUNTIES only for CALLSIGN in MOQP database. Entering allcalls = all calls in database')
        parser.add_argument('-i', '--inputpath', default=None,
            help='Specifies the path to the folder that contains the log files to summarize.')
        parser.add_argument('-b', '--cabbonus', 
                                   action='store_true', 
                                   default=False,
                                   help='Specifies the the CABRILLO BONUS applies to this log.')
        return parser.parse_args()


if __name__ == '__main__':
   args = get_args()
   
   if (args.args.inputpath):
       #print(args.args.inputpath)
       from moqputils.moqpcategory import MOQPCategory
       app = MOQPCategory(args.args.inputpath,
                          args.args.cabbonus)
   elif (args.args.callsign):
       from moqputils.moqpdbcategory import MOQPDBCategory
       app = MOQPDBCategory(args.args.callsign)
   elif (args.args.digital):
       from modqutils.moqpdbdigital import MOQPDBDigital
       app = MOQPDBDigital(args.args.digital)
   elif (args.args.vhf):
       from moqputils.moqpdbvhf import MOQPDBVhf
       app = MOQPDBVhf(args.args.vhf)
   elif (args.args.mostcounties):
       from moqputils.moqpdbcountyrpt import MOQPDBCountyRpt
       app = MOQPDBCountyRpt(args.args.mostcounties)
   else:
       from moqputils.gui_moqpcategory import gui_MOQPCategory
       app=gui_MOQPCategory()
        
